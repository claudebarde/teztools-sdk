{"mappings":"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","sources":["src/index.ts"],"sourcesContent":["type TezosContractAddress = `KT1${string}`;\ntype TezosAccountAddress = `tz${\"1\" | \"2\" | \"3\"}${string}`;\nenum tokenType {\n  FA12 = \"fa1.2\",\n  FA2 = \"fa2\",\n  XTZ = \"XTZ\"\n}\ntype dexName = \"Quipuswap\" | \"Plenty\";\n\ntype xtzPrice = {\n  fullData: boolean; // if all the expected data has been received\n  price: number | null;\n  price24h: number | null;\n  marketCap: number | null;\n  market24h: number | null;\n  volume: number | null;\n  volume24h: number | null;\n  updated: string | null;\n};\n\ninterface TokenPairSide {\n  symbol: string | null;\n  pool: number | null;\n  price: number | null;\n  usdvalue: number | null;\n  dayClose: number | null;\n  weekClose: number | null;\n  monthClose: number | null;\n  tokenType: string | null;\n}\n\ninterface TokenPair {\n  address: TezosContractAddress | null;\n  dex: dexName | null;\n  symbols: string | null;\n  tvl: number | null;\n  lptSupply: number | null;\n  sides: Array<TokenPairSide> | null;\n}\n\ninterface TokenData {\n  symbol: string | null;\n  tokenAddress: { address: TezosContractAddress; isValid: boolean } | null;\n  decimals: number | null;\n  name: string | null;\n  shouldPreferSymbol: boolean | null;\n  factoryIndex: number | null;\n  address: { address: TezosContractAddress; isValid: boolean } | null;\n  ratio: number | null;\n  tezPool: number | null;\n  tokenPool: number | null;\n  currentPrice: number | null;\n  lastPrice: number | null;\n  buyPrice: number | null;\n  sellPrice: number | null;\n  precision: number | null;\n  type: tokenType | null;\n  bakerValidator: TezosContractAddress | null;\n  currentCandidate: TezosAccountAddress | null;\n  currentDelegated: TezosAccountAddress | null;\n  lastUpdateTime: string | null;\n  lastVeto: string | null;\n  periodFinish: string | null;\n  reward: number | null;\n  rewardPaid: number | null;\n  rewardPerSec: number | null;\n  totalReward: number | null;\n  totalSupply: number | null;\n  qptTokenSupply: number | null;\n  totalVotes: number | null;\n  usdValue: number | null;\n  pairs: Array<TokenPair>;\n  tags: string | null;\n  websiteLink: { url: string; isValid: boolean } | null;\n  telegramLink: { url: string; isValid: boolean } | null;\n  twitterLink: { url: string; isValid: boolean } | null;\n  discordLink: { url: string; isValid: boolean } | null;\n  thumbnailUri: { url: string; isValid: boolean } | null;\n  timestamp: string | null;\n  block: string | null;\n}\n\nconst validateAddress = (address: any): boolean => {\n  if (typeof address !== \"string\") return false;\n\n  address = address.trim();\n  if (address.length === 0) return false;\n\n  if (address.slice(0, 2) === \"tz\") {\n    const regex = new RegExp(\"tz[123][1-9A-HJ-NP-Za-km-z]{33}\");\n    return regex.test(address);\n  } else if (address.slice(0, 2) === \"KT\") {\n    const regex = new RegExp(\"KT1[1-9A-HJ-NP-Za-km-z]{33}\");\n    return regex.test(address);\n  } else {\n    return false;\n  }\n};\n\nexport default class TezToolsSDK {\n  pricesApiUrl = \"https://api.teztools.io/v1/prices\";\n  xtzPriceUrl = \"https://api.teztools.io/v1/xtz-price\";\n  xtzPrice: xtzPrice | undefined = undefined;\n  tokensPrices: Array<TokenData>;\n  tokensList: Array<string>;\n  defaultFiat = \"USD\";\n  xtzExchangeRate: number | null | undefined = undefined;\n  tokenTags: Array<string> = [];\n\n  constructor() {\n    this.tokensPrices = [];\n    this.tokensList = [];\n  }\n\n  private is_number(val: any): boolean {\n    return !isNaN(+val);\n  }\n  private is_timestamp(val: any): boolean {\n    return new Date(val).getTime() > 0;\n  }\n  private is_string(val: any): boolean {\n    return typeof val === \"string\";\n  }\n  private is_boolean(val: any): boolean {\n    return typeof val === \"boolean\";\n  }\n  private is_url(val: any): boolean {\n    try {\n      new URL(val);\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  /**\n   * Fetches the token prices and the XTZ price\n   * @param {Object[prices: boolean; xtzPrice: boolean; defaultFiat: string; fiatExchangeRate: number]} params Option to choose data fetched by the instance\n   * @return {Promise<TezToolsPrices>} A promise with an instance of the class\n   */\n  async setup(p?: {\n    prices?: boolean;\n    xtzPrice?: boolean;\n    defaultFiat?: string;\n    fiatExchangeRate?: number;\n  }): Promise<TezToolsSDK> {\n    const prices = p && p.prices ? p.prices : true;\n    const xtzPrice = p && p.xtzPrice ? p.xtzPrice : true;\n    const defaultFiat = p && p.defaultFiat ? p.defaultFiat : \"USD\";\n    const fiatExchangeRate =\n      p && p.fiatExchangeRate ? p.fiatExchangeRate : undefined;\n    if (prices) {\n      // fetches tokens prices\n      try {\n        const response = await fetch(this.pricesApiUrl);\n        if (response) {\n          const data = await response.json();\n          if (typeof data !== \"object\") {\n            throw `Expected object from token prices API, got ${typeof data}`;\n          } else if (\n            typeof data === \"object\" &&\n            !data.hasOwnProperty(\"contracts\")\n          ) {\n            throw `Object received from token prices API doesn't have a \"contracts\" property`;\n          } else if (\n            typeof data === \"object\" &&\n            data.hasOwnProperty(\"contracts\") &&\n            !Array.isArray(data.contracts)\n          ) {\n            throw `Expected contracts property from token prices API to be an array, got ${typeof data.contracts} instead`;\n          } else {\n            // right format\n            data.contracts.forEach((contract: TokenData) => {\n              let token: TokenData = {\n                symbol: null,\n                tokenAddress: null,\n                decimals: null,\n                name: null,\n                shouldPreferSymbol: null,\n                factoryIndex: null,\n                address: null,\n                ratio: null,\n                tezPool: null,\n                tokenPool: null,\n                currentPrice: null,\n                lastPrice: null,\n                buyPrice: null,\n                sellPrice: null,\n                precision: null,\n                type: null,\n                bakerValidator: null,\n                currentCandidate: null,\n                currentDelegated: null,\n                lastUpdateTime: null,\n                lastVeto: null,\n                periodFinish: null,\n                reward: null,\n                rewardPaid: null,\n                rewardPerSec: null,\n                totalReward: null,\n                totalSupply: null,\n                qptTokenSupply: null,\n                totalVotes: null,\n                usdValue: null,\n                pairs: [],\n                tags: null,\n                websiteLink: null,\n                telegramLink: null,\n                twitterLink: null,\n                discordLink: null,\n                thumbnailUri: null,\n                timestamp: null,\n                block: null\n              };\n              const contractKeys = Object.keys(contract);\n              contractKeys.forEach(contractKey => {\n                // validates data\n                switch (contractKey) {\n                  case \"symbol\":\n                    const symbol = contract[contractKey];\n                    if (this.is_string(symbol)) {\n                      this.tokensList.push(symbol as string);\n                      token.symbol = symbol;\n                    } else {\n                      token.symbol = null;\n                    }\n                    break;\n                  case \"tokenAddress\":\n                    const tokenAddress: unknown = contract[contractKey];\n                    token.tokenAddress = (() => {\n                      if (\n                        this.is_string(tokenAddress) &&\n                        validateAddress(tokenAddress)\n                      ) {\n                        return {\n                          address: tokenAddress as TezosContractAddress,\n                          isValid: true\n                        };\n                      } else {\n                        return null;\n                      }\n                    })();\n                    break;\n                  case \"decimals\":\n                    const decimals = contract[contractKey];\n                    token.decimals = this.is_number(decimals) ? decimals : null;\n                    break;\n                  case \"name\":\n                    const name = contract[contractKey];\n                    token.name = this.is_string(name) ? name : null;\n                    break;\n                  case \"shouldPreferSymbol\":\n                    token.shouldPreferSymbol = this.is_boolean(\n                      contract[contractKey]\n                    )\n                      ? contract[contractKey]\n                      : null;\n                    break;\n                  case \"factoryIndex\":\n                    const factoryIndex = contract[contractKey];\n                    token.factoryIndex = this.is_number(factoryIndex)\n                      ? factoryIndex\n                      : null;\n                    break;\n                  case \"address\":\n                    const address: unknown = contract[contractKey];\n                    token.address = (() => {\n                      if (this.is_string(address) && validateAddress(address)) {\n                        return {\n                          address: address as TezosContractAddress,\n                          isValid: true\n                        };\n                      } else {\n                        return null;\n                      }\n                    })();\n                    break;\n                  case \"ratio\":\n                    const ratio = contract[contractKey];\n                    token.ratio = this.is_number(ratio) ? ratio : null;\n                    break;\n                  case \"tezPool\":\n                    const tezPool = contract[contractKey];\n                    token.tezPool = this.is_number(tezPool) ? tezPool : null;\n                    break;\n                  case \"tokenPool\":\n                    const tokenPool = contract[contractKey];\n                    token.tokenPool = this.is_number(tokenPool)\n                      ? tokenPool\n                      : null;\n                    break;\n                  case \"currentPrice\":\n                    const currentPrice = contract[contractKey];\n                    token.currentPrice = this.is_number(currentPrice)\n                      ? currentPrice\n                      : null;\n                    break;\n                  case \"lastPrice\":\n                    const lastPrice = contract[contractKey];\n                    token.lastPrice = this.is_number(lastPrice)\n                      ? lastPrice\n                      : null;\n                    break;\n                  case \"buyPrice\":\n                    const buyPrice = contract[contractKey];\n                    token.buyPrice = this.is_number(buyPrice) ? buyPrice : null;\n                    break;\n                  case \"sellPrice\":\n                    const sellPrice = contract[contractKey];\n                    token.sellPrice = this.is_number(sellPrice)\n                      ? sellPrice\n                      : null;\n                    break;\n                  case \"precision\":\n                    const precision = contract[contractKey];\n                    token.precision = this.is_number(precision)\n                      ? precision\n                      : null;\n                    break;\n                  case \"type\":\n                    const type = contract[contractKey];\n                    switch (type) {\n                      case tokenType.FA12:\n                        token.type = tokenType.FA12;\n                        break;\n                      case tokenType.FA2:\n                        token.type = tokenType.FA2;\n                        break;\n                      case tokenType.XTZ:\n                        token.type = tokenType.XTZ;\n                        break;\n                      default:\n                        token.type = null;\n                        break;\n                    }\n                    break;\n                  case \"bakerValidator\":\n                    const bakerValidator: unknown = contract[contractKey];\n                    token.bakerValidator = validateAddress(bakerValidator)\n                      ? (bakerValidator as TezosContractAddress)\n                      : null;\n                    break;\n                  case \"currentCandidate\":\n                    const currentCandidate = contract[contractKey];\n                    token.currentCandidate = validateAddress(currentCandidate)\n                      ? currentCandidate\n                      : null;\n                    break;\n                  case \"currentDelegated\":\n                    const currentDelegated = contract[contractKey];\n                    token.currentDelegated = validateAddress(currentDelegated)\n                      ? currentDelegated\n                      : null;\n                    break;\n                  case \"lastUpdateTime\":\n                    const lastUpdateTime = contract[contractKey];\n                    token.lastUpdateTime = this.is_timestamp(lastUpdateTime)\n                      ? lastUpdateTime\n                      : null;\n                    break;\n                  case \"lastVeto\":\n                    const lastVeto = contract[contractKey];\n                    token.lastVeto = this.is_timestamp(lastVeto)\n                      ? lastVeto\n                      : null;\n                    break;\n                  case \"periodFinish\":\n                    const periodFinish = contract[contractKey];\n                    token.periodFinish = this.is_timestamp(periodFinish)\n                      ? periodFinish\n                      : null;\n                    break;\n                  case \"reward\":\n                    const reward = contract[contractKey];\n                    token.reward = this.is_number(reward) ? reward : null;\n                    break;\n                  case \"rewardPaid\":\n                    const rewardPaid = contract[contractKey];\n                    token.rewardPaid = this.is_number(rewardPaid)\n                      ? rewardPaid\n                      : null;\n                    break;\n                  case \"rewardPerSec\":\n                    const rewardPerSec = contract[contractKey];\n                    token.rewardPerSec = this.is_number(rewardPerSec)\n                      ? rewardPerSec\n                      : null;\n                    break;\n                  case \"totalReward\":\n                    const totalReward = contract[contractKey];\n                    token.totalReward = this.is_number(totalReward)\n                      ? totalReward\n                      : null;\n                    break;\n                  case \"totalSupply\":\n                    const totalSupply = contract[contractKey];\n                    token.totalSupply = this.is_number(totalSupply)\n                      ? totalSupply\n                      : null;\n                    break;\n                  case \"qptTokenSupply\":\n                    const qptTokenSupply = contract[contractKey];\n                    token.qptTokenSupply = this.is_number(qptTokenSupply)\n                      ? qptTokenSupply\n                      : null;\n                    break;\n                  case \"totalVotes\":\n                    const totalVotes = contract[contractKey];\n                    token.totalVotes = this.is_number(totalVotes)\n                      ? totalVotes\n                      : null;\n                    break;\n                  case \"usdValue\":\n                    const usdValue = contract[contractKey];\n                    token.usdValue = this.is_number(usdValue) ? usdValue : null;\n                    break;\n                  case \"pairs\":\n                    const pairs = contract[contractKey];\n                    const tokenPairs: Array<TokenPair> = [];\n                    pairs.forEach(pair => {\n                      let tokenPair: TokenPair = {\n                        address: validateAddress(pair.address)\n                          ? pair.address\n                          : null,\n                        dex: this.is_string(pair.dex) ? pair.dex : null,\n                        symbols: this.is_string(pair.symbols)\n                          ? pair.symbols\n                          : null,\n                        tvl: this.is_number(pair.tvl) ? pair.tvl : null,\n                        lptSupply: this.is_number(pair.lptSupply)\n                          ? pair.tvl\n                          : null,\n                        sides: Array.isArray(pair.sides)\n                          ? [\n                              ...pair.sides.map(side => {\n                                let tokenPairSide: TokenPairSide = {\n                                  symbol: this.is_string(side.symbol)\n                                    ? side.symbol\n                                    : null,\n                                  pool: this.is_number(side.pool)\n                                    ? side.pool\n                                    : null,\n                                  price: this.is_number(side.price)\n                                    ? side.price\n                                    : null,\n                                  usdvalue: this.is_number(side.usdvalue)\n                                    ? side.usdvalue\n                                    : null,\n                                  dayClose: this.is_number(side.dayClose)\n                                    ? side.dayClose\n                                    : null,\n                                  weekClose: this.is_number(side.weekClose)\n                                    ? side.weekClose\n                                    : null,\n                                  monthClose: this.is_number(side.monthClose)\n                                    ? side.monthClose\n                                    : null,\n                                  tokenType: this.is_string(side.tokenType)\n                                    ? side.tokenType\n                                    : null\n                                };\n                                return tokenPairSide;\n                              })\n                            ]\n                          : null\n                      };\n                      tokenPairs.push(tokenPair);\n                    });\n                    token.pairs = tokenPairs;\n                    break;\n                  case \"tags\":\n                    const tags = contract[contractKey];\n                    token.tags = this.is_string(tags) ? tags : null;\n                    break;\n                  case \"websiteLink\":\n                    const websiteLink: unknown = contract[contractKey];\n                    token.websiteLink = (() => {\n                      if (this.is_string(websiteLink)) {\n                        return {\n                          url: websiteLink as string,\n                          isValid: this.is_url(websiteLink)\n                        };\n                      } else {\n                        return null;\n                      }\n                    })();\n                    break;\n                  case \"telegramLink\":\n                    const telegramLink: unknown = contract[contractKey];\n                    token.telegramLink = (() => {\n                      if (this.is_string(telegramLink)) {\n                        return {\n                          url: telegramLink as string,\n                          isValid: this.is_url(telegramLink)\n                        };\n                      } else {\n                        return null;\n                      }\n                    })();\n                    break;\n                  case \"twitterLink\":\n                    const twitterLink: unknown = contract[contractKey];\n                    token.twitterLink = (() => {\n                      if (this.is_string(twitterLink)) {\n                        return {\n                          url: twitterLink as string,\n                          isValid: this.is_url(twitterLink)\n                        };\n                      } else {\n                        return null;\n                      }\n                    })();\n                    break;\n                  case \"discordLink\":\n                    const discordLink: unknown = contract[contractKey];\n                    token.discordLink = (() => {\n                      if (this.is_string(discordLink)) {\n                        return {\n                          url: discordLink as string,\n                          isValid: this.is_url(discordLink)\n                        };\n                      } else {\n                        return null;\n                      }\n                    })();\n                    break;\n                  case \"thumbnailUri\":\n                    const thumbnailUri: unknown = contract[contractKey];\n                    token.thumbnailUri = (() => {\n                      if (this.is_string(thumbnailUri)) {\n                        return {\n                          url: thumbnailUri as string,\n                          isValid: this.is_url(thumbnailUri)\n                        };\n                      } else {\n                        return null;\n                      }\n                    })();\n                    break;\n                  case \"timestamp\":\n                    const timestamp = contract[contractKey];\n                    token.timestamp = this.is_timestamp(timestamp)\n                      ? timestamp\n                      : null;\n                    break;\n                  case \"block\":\n                    const block = contract[contractKey];\n                    token.block = this.is_string(block) ? block : null;\n                    break;\n                }\n              });\n              this.tokensPrices.push(token);\n            });\n            this.tokenTags = Array.from(\n              new Set(\n                this.tokensPrices.map(tk => tk.tags).filter(tk => tk !== null)\n              )\n            ) as Array<string>;\n          }\n        } else {\n          throw \"No response from the tokens prices API\";\n        }\n      } catch (error) {\n        console.error();\n      }\n    }\n    if (xtzPrice) {\n      // fetches XTZ price\n      try {\n        const response = await fetch(this.xtzPriceUrl);\n        if (response) {\n          const data = await response.json();\n          // empty object for data\n          let xtzPrice: xtzPrice = {\n            fullData: true,\n            price: null,\n            price24h: null,\n            marketCap: null,\n            market24h: null,\n            volume: null,\n            volume24h: null,\n            updated: null\n          };\n          // checks the data has the right shape\n          const expectedKeys = Object.keys(xtzPrice);\n          const receivedKeys = Object.keys(data);\n          const matchingKeys = receivedKeys\n            .map(key => expectedKeys.includes(key))\n            .reduce((a, b) => a && b);\n          if (!matchingKeys || expectedKeys.length === receivedKeys.length) {\n            xtzPrice.fullData = false;\n          }\n          // copies received data into xtzPrice object\n          Object.keys(xtzPrice).forEach(key => {\n            if (data.hasOwnProperty(key)) {\n              // checks data type\n              if (key === \"updated\" && this.is_timestamp(data[key])) {\n                xtzPrice.updated = data.updated;\n              } else if (this.is_number(data[key])) {\n                // HACK: find a proper way to type xtzPrice[key]\n                (xtzPrice as any)[key] = +data[key];\n              }\n            }\n          });\n          this.xtzPrice = xtzPrice;\n          // user can set custom fiat\n          if (defaultFiat !== \"USD\" && fiatExchangeRate) {\n            this.defaultFiat = \"EUR\";\n            this.xtzExchangeRate = fiatExchangeRate;\n          } else {\n            this.xtzExchangeRate = xtzPrice.price;\n          }\n        } else {\n          throw \"No response from the XTZ price API\";\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Allows users to set their own currency and exchange rate instead of the USD\n   * @param {string} symbol the symbol of the currency\n   * @param exchangeRate the exchange rate of the currency for 1 XTZ\n   * @returns an instance of the class\n   */\n  updateInternalFiat(symbol: string, exchangeRate: number): TezToolsSDK {\n    this.defaultFiat = symbol;\n    this.xtzExchangeRate = exchangeRate;\n\n    return this;\n  }\n\n  /**\n   * Gets data about a single token\n   * @param {string} tokenSymbol the token symbol to return\n   * @returns {TokenData|null} the token data if found, otherwise null\n   */\n  get(tokenSymbol: string): TokenData | null {\n    if (!this.tokensList.includes(tokenSymbol)) {\n      return null;\n    } else {\n      const result = this.tokensPrices.find(tk => tk.symbol === tokenSymbol);\n      if (result) {\n        return result;\n      } else {\n        return null;\n      }\n    }\n  }\n\n  // alias for get\n  getBySymbol(tokenSymbol: string): TokenData | null {\n    return this.get(tokenSymbol);\n  }\n\n  /**\n   * Gets token data by type\n   * @param {tokenType} type the token type to find\n   * @returns {Array<TokenData>} the tokens found with the matching type\n   */\n  getByType(type: tokenType): Array<TokenData> {\n    return this.tokensPrices.filter(tk => tk.type === type);\n  }\n\n  /**\n   *\n   * @param {TezosContractAddress} address the address of the contract to find\n   * @returns the token found with the matching address\n   */\n  getByAddress(address: TezosContractAddress): TokenData | null {\n    const result = this.tokensPrices.find(tk =>\n      tk.tokenAddress ? tk.tokenAddress.address === address : undefined\n    );\n    if (result) {\n      return result;\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   *\n   * @param {string} tag the tag to find\n   * @param {boolean} precision if set to true, must find the exact tag\n   * @returns an array of TokenData\n   */\n  getByTag(tag: string, precision?: boolean): Array<TokenData> {\n    if (precision) {\n      return this.tokensPrices.filter(\n        tk => tk.tags && tk.tags === tag.toLowerCase()\n      );\n    } else {\n      return this.tokensPrices.filter(\n        tk => tk.tags && tk.tags.toLowerCase().includes(tag.toLowerCase())\n      );\n    }\n  }\n\n  /**\n   * Gets a list of token data\n   * @returns a list of available tokens\n   */\n  getTokensList(): Array<string> {\n    return this.tokensList.sort((a, b) => (a > b ? 1 : -1));\n  }\n\n  /**\n   * Gets a list of tokens whose price is greater than the provided price\n   * @param {number} price a price in tez\n   * @returns a list of TokenData with a price greater than the parameter\n   */\n  getTokensWithPriceGreaterThan(price: number): Array<TokenData> {\n    return this.tokensPrices\n      .filter(tk => (tk.currentPrice ? tk.currentPrice > price : false))\n      .sort((a, b) => {\n        if (a.currentPrice && b.currentPrice) {\n          return a.currentPrice - b.currentPrice;\n        } else {\n          return 0;\n        }\n      });\n  }\n\n  /**\n   * Gets a list of tokens whose price is less than the provided price\n   * @param {number} price a price in tez\n   * @returns a list of TokenData with a price less than the parameter\n   */\n  getTokensWithPriceLessThan(price: number): Array<TokenData> {\n    return this.tokensPrices\n      .filter(tk => (tk.currentPrice ? tk.currentPrice < price : false))\n      .sort((a, b) => {\n        if (a.currentPrice && b.currentPrice) {\n          return a.currentPrice - b.currentPrice;\n        } else {\n          return 0;\n        }\n      });\n  }\n\n  /**\n   * Gets a list of token data ordered by USD value\n   * @param {Array<string>} [tokens] An array of token symbols to return\n   * @returns a list of TokenData order bu their USD value\n   */\n  orderByUsdValue(\n    dir: \"asc\" | \"desc\",\n    tokens?: Array<string>\n  ): Array<TokenData> {\n    const sortedTokens = this.tokensPrices.sort((a, b) => {\n      if (a.usdValue && b.usdValue) {\n        return dir === \"desc\"\n          ? b.usdValue - a.usdValue\n          : a.usdValue - b.usdValue;\n      } else {\n        return 0;\n      }\n    });\n    if (tokens) {\n      return sortedTokens.filter(tk =>\n        tk.symbol ? tokens.includes(tk.symbol) : false\n      );\n    } else {\n      return sortedTokens;\n    }\n  }\n  // alias for this.orderByUsdValue(\"desc\")\n  orderByUsdValueDesc(tokens?: Array<string>): Array<TokenData> {\n    return this.orderByUsdValue(\"desc\", tokens);\n  }\n  // alias for this.orderByUsdValue(\"asc\")\n  orderByUsdValueAsc(tokens?: Array<string>): Array<TokenData> {\n    return this.orderByUsdValue(\"asc\", tokens);\n  }\n\n  /**\n   * Gets a list of tokens with their symbol and price\n   * @param {Array<string>} [tokens] An optional array of token symbols to filter the results\n   * @returns {Array<{symbol: string; xtzPrice: string; usdPrice: string}>} An array of objects with current price in XTZ and USD\n   */\n  getCurrentPrice(tokens?: Array<string>): Array<{\n    symbol: string | null;\n    xtzPrice: number | null;\n    fiatPrice: number | null;\n    fiat: string | null;\n  }> | null {\n    const tokensCurrentPrices = this.tokensPrices.map(tk => ({\n      symbol: tk.symbol,\n      xtzPrice: tk.currentPrice,\n      fiatPrice:\n        tk.currentPrice && this.xtzExchangeRate\n          ? tk.currentPrice * this.xtzExchangeRate\n          : null,\n      fiat: this.defaultFiat\n    }));\n    if (tokens && tokens.length > 0) {\n      return tokensCurrentPrices.filter(tk =>\n        tk.symbol ? tokens.includes(tk.symbol) : false\n      );\n    } else {\n      return null;\n    }\n  }\n}\n"],"names":[],"version":3,"file":"main.js.map"}